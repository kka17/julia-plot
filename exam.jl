"""
======================================================================
1. Система типов: приведение к типам, конкретные и абстрактные типы,
множественная диспетчеризация
"""

"""
что происходит?
"""
a = 1
b = 2.0
c = a + b
typeof(a) - Int64 
typeof(b) - Float64
typeof(c) - Float64
"""
написать тип, параметризованный другим типом
"""


"""
написать функцию для двух аругментов, не указывая их тип
и функцию для двух аргментов с конкретными типами, запустить их
"""
function mysum(a, b)
    c = a - b
    return c
end

function mysum(a::Int8, b::Int8)
    c = a + b
    return c
end
    
sum(1.0, 3.0)
sum(1.0, 3.0)
"""
абстрактный тип - ключевое слово?
примитивный тип - ключевое слово?
композитный тип - ключевое слово?
"""
Abstract  - abstract type
Primitive - primitive type
Composite - struct

"""
написать один абстрактный тип и два его подтипа (1 и 2)
написать функцию над абстрактным типом, и функцию над её подтипом-1
выполнить функции над объектами подтипов 1 и 2 и объяснить результат
(функция выводит произвольный текст в консоль)
"""
Number: Complex & Real

double(x::Number) = 2x
double(1.2)


"""
======================================================================
2. Функции: лямбды и обычные функции,
переменное количество аргументов, аргументы ключ-значение, кортежи
"""

"""
пример обычной функции
"""
function sum(a, b)
    c = a+b
    return c
end

"""
пример лямбда-функции
"""
f(a,b) = a + b

или имелась в виду анонимная функция? это одно и то же? 

function (a, b)
    (a + b)^2 - (a - b)^2
end
"""
пример функции с переменным количеством аргументов
"""
moll(a,b,c...) = (a, b, c) 
"""
пример функции с именованными аргументами
"""
function sum(a=5, b=7)
    c = a^2 + b^3
    return c
end

"""
функции с переменным кол-вом именованных аргументов
"""

"""
передать кортеж в функцию, которая принимает на вход несколько аргументов
присвоить кортеж результату функции, которая возвращает несколько аргументов
деструктуризация кортежа - в набор переменных
"""

"""
======================================================================
3. loop fusion, broadcast, filter, map, reduce
"""

"""
перемножить все элементы массива
с помощью reduce
"""
reduce(*, [10; 20; 30; 40])
"""
написать функцию от одного аргумента и запустить ее по всем элементам массива
с помощью точки
c помощью map
"""

function ihave(a) 
    b = "I have $(a)"
    return b
end 
map(ihave, ["a pen", "an apple"])

"""
перемножить вектор-строку [1 2 3] на вектор-столбец [10,20,30] и объяснить результат
"""

"""
в одну строку выбрать из массива [1, -2, 2, 3, 4, -5, 0] только четные и положительные числа
"""
arr = [1, -2, 2, 3, 4, -5, 0]
function choose(arr) 
    newarr = ""
    for i in arr 
        if i % 2 == 0 && i * -i == -i^2
            newarr = i
        end
    end
    return newarr
end
но это неправильно :D

"""
======================================================================
4. Свои типы данных на общих интерфейсах, в частности AbstractArray
"""

"""
можно объяснить на примерах готовых пакетов:
StructArrays, CircularBuffers, OffsetBuffers
"""

"""
======================================================================
5. Тесты: как проверять функции?
"""

"""
написать тест для функции
"""

"""
======================================================================
6. Дебаг: как отладить функцию по шагам?
"""

"""
написать и отладить функцию по шагам
"""
function spin(str)
    y = str[end:-1:1]
end
function spin(str,k)
    init = str[1:k]
    finish = str[end-k+1:end]
    mid = str[k+1:end-k]
    y = join([init, spin(mid), finish])
    if(length(init)==k) 
        println("Error") 
    end
    return y
end
greeting = "Congratulation!"
spin(greeting, 0)
spin(greeting, 16)
spin(greeting, 15)

"""
======================================================================
7. Профилировщик: как оценить производительность функции?
"""

"""
оценить производительность функции
"""

"""
======================================================================
8. Отличия от матлаба: приращение массива и предварительная аллокация?
"""

"""
написать функцию, которая аллоцирует новый массив
"""

"""
написать функцию, которая пишет в предварительно аллоцированный массив
"""

"""
написать код, который добавляет элементы в конец массива, в начало массива, в середину массива
"""

"""
======================================================================
9. Модули и функции: зачем оборачивать функции внутрь модуля, как их экспортировать и пользоваться вне модуля?
"""

"""
написать модуль с двумя функциями,
экспортировать одну из них,
воспользоваться обеими функциями вне модуля
"""

"""
======================================================================
10. Зависимости, окружение и пакеты
"""

"""
что такое environment, как задать его, как его поменять во время работы?
"""

"""
что такое пакет (package), как добавить новый пакет?
"""

"""
как начать разрабатывать чужой пакет?
"""

"""
как создать свой пакет? (сложный вопрос, поэтому необязательно)
"""

"""
======================================================================
11. Аргументы запуска Julia
"""

"""
Как задать окружение при запуске?
"""

"""
Как задать скрипт, который будет выполняться при з-апуске:
а) из файла .jl
б) из текста команды? (см. флаг -e)
"""